/*
 *  BSD LICENSE
 *
 *  Copyright(c) 2014-2017 Broadcom.  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in
 *      the documentation and/or other materials provided with the
 *      distribution.
 *    * Neither the name of Broadcom nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/dts-v1/;

#include <dt-bindings/input/input.h>

#include "bcm-cygnus.dtsi"
#include "bcm9hmidc.dtsi"

/* Have all the supported panel dt files included here and let dsi_panel
 * node to point to the default panel node, so that without rebuilding
 * we can support multiple panels
 */
#include "hx8389b-lcd-panel.dtsi"
#include "hx8389c-lcd-panel.dtsi"
#include "innolux-lcd-panel.dtsi"

/ {
	model = "Cygnus SVK (BCM958300K)";
	compatible = "brcm,bcm58300", "brcm,cygnus";

	aliases {
		serial0 = &uart3;
	};

	chosen {
		stdout-path = "serial0:115200n8";
	};

	vbus_p0: regulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "usb-vbus-p0";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		gpio = <&gpio_ccm 5 0>;
		enable-active-high;
		status = "okay";
	};

	vbus_p1: regulator@1 {
		compatible = "regulator-fixed";
		regulator-name = "usb-vbus-p1";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		gpio = <&gpio_ccm 6 0>;
		enable-active-high;
		status = "okay";
	};

	vbus_p2: regulator@2 {
		compatible = "regulator-fixed";
		regulator-name = "usb-vbus-p2";
		regulator-min-microvolt = <5000000>;
		regulator-max-microvolt = <5000000>;
		gpio = <&gpio_ccm 7 0>;
		enable-active-high;
		status = "okay";
	};

	gpio-keys {
		compatible = "gpio-keys";
		status = "okay";

		power {
			label = "power";
			gpios = <&gpio_crmu 5 0>;
			linux,code = <KEY_POWER>;
			gpio-key,wakeup;
		};
	};
};

&unicam {
	status = "okay";
	port {
		#address-cells = <1>;
		#size-cells = <0>;
		unicam_0: endpoint {
			remote-endpoint = <&ov5640_0>;
			bus-width = <8>;
		};
	};
};

&iproc_dsi {
	dsi_panel = <&panel_innolux>;
};

&pcie0 {
	status = "okay";
};

&i2c0 {
	status = "okay";
	ov5640: camera@3c {
		compatible = "ovti,ov5640";
		reg = <0x3c>;
		port {
			ov5640_0: endpoint {
				remote-endpoint = <&unicam_0>;
				bus-width = <8>;
			};
		};
	};
};

&pcie1 {
	status = "okay";
};

&uart3 {
	status = "okay";
};

&enet {
	status = "okay";
};

&nand {
	nandcs@1 {
		compatible = "brcm,nandcs";
		reg = <0>;
		nand-on-flash-bbt;

		#address-cells = <1>;
		#size-cells = <1>;

		nand-ecc-strength = <24>;
		nand-ecc-step-size = <1024>;

		brcm,nand-oob-sector-size = <27>;
	};
};

&usb2 {
	status = "okay";
};

&usbphy {
	usbphy0: usb-phy@0 {
		vbus-p0-supply = <&vbus_p0>;
	};

	usbphy1: usb-phy@1 {
		vbus-p1-supply = <&vbus_p1>;
	};

	usbphy2: usb-phy@2 {
		vbus-p2-supply = <&vbus_p2>;
	};
};

&ehci0 {
	phys = <&usbphy0 0 &usbphy1 1 &usbphy2 2>;
	phy-names = "usbp0", "usbp1", "usbp2";
	status = "okay";
};

&ohci0 {
	phys = <&usbphy0 0 &usbphy1 1 &usbphy2 2>;
	phy-names = "usbp0", "usbp1", "usbp2";
	status = "okay";
};

&pm {
	status = "okay";
};

&mipipll {
	assigned-clocks = <&mipipll BCM_CYGNUS_MIPIPLL_CH0_DSI>,
			<&mipipll BCM_CYGNUS_MIPIPLL_CH1_LCD>,
			<&mipipll BCM_CYGNUS_MIPIPLL>;
	assigned-clock-parents = <&mipipll BCM_CYGNUS_MIPIPLL>,
			<&mipipll BCM_CYGNUS_MIPIPLL>;
	assigned-clock-rates = <0>, <0>, <2100000000>;
};

&clcd {
	clocks =  <&mipipll BCM_CYGNUS_MIPIPLL_CH1_LCD>, <&apb_clk>;
	clcd-clock-select = <1>;

	port {
		clcd_pads: endpoint {
			remote-endpoint = <&clcd_panel>;
			arm,pl11x,tft-r0g0b0-pads = <0 8 16>;
		};
	};

	panel {
		compatible = "panel-dpi";
		port {
			clcd_panel: endpoint {
				remote-endpoint = <&clcd_pads>;
			};
		};
	};
};

&pwm {
	status = "okay";
};

&spi1 {
	status = "okay";

	spidev@0 {
		compatible = "spidev-test";
		reg = <0>;
		spi-max-frequency = <5000000>;
	};
};
